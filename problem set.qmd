---

title: "Homework — Abalone, Food Expenditure, and Collatz Conjecture"

author: "Your Name"

format: html

execute:

echo: true

warning: false

message: false

---

\`\`\`{r}

\# Helper

nice_pct \<- function(x, digits = 1) paste0(round(x, digits), "%")

\# =======================

\# Problem 1 — Abalone Data

\# =======================

abalone \<- read.csv("abalone.data", header = FALSE)

colnames(abalone) \<- c("Sex","Length","Diameter","Height","WholeWeight","ShuckedWeight","VisceraWeight","ShellWeight","Rings")

sex_map \<- c(F="Female", M="Male", I="Infant")

\# Counts by sex

sex_counts \<- sort(table(abalone\$Sex))

sex_counts_named \<- setNames(as.integer(sex_counts), sex_map\[names(sex_counts)\])

print(sex_counts_named)

\# Correlations overall

weights \<- c("WholeWeight","ShuckedWeight","VisceraWeight","ShellWeight")

cors_overall \<- sapply(weights, function(w) cor(abalone\[\[w\]\], abalone\$Rings))

print(cors_overall)

best_weight \<- names(which.max(cors_overall))

best_weight_r \<- max(cors_overall)

\# Correlation by sex for best weight

cor_by_sex_best \<- sapply(names(sex_map), function(s) {

cor(abalone\[abalone\$Sex==s, best_weight\], abalone\[abalone\$Sex==s,"Rings"\])

})

names(cor_by_sex_best) \<- sex_map\[names(cor_by_sex_best)\]

print(cor_by_sex_best)

best_sex \<- names(which.max(cor_by_sex_best))

best_sex_r \<- max(cor_by_sex_best)

\# Abalones with most rings

max_rings \<- max(abalone\$Rings)

abalone_top \<- abalone\[abalone\$Rings==max_rings, c(weights,"Rings")\]

print(abalone_top)

\# Percentage viscera \> shell

pct_visc_gt_shell \<- mean(abalone\$VisceraWeight \> abalone\$ShellWeight)\*100

print(pct_visc_gt_shell)

\# Correlation table by sex

cor_table \<- sapply(weights, function(w) {

tapply(abalone\[\[w\]\], abalone\$Sex, function(x) cor(x, abalone\$Rings\[abalone\$Sex==names(x)\[1\]\]))

})

rownames(cor_table) \<- sex_map\[rownames(cor_table)\]

print(round(cor_table,3))

\# T-tests across sexes

tt \<- pairwise.t.test(abalone\$Rings, abalone\$Sex, p.adjust.method="holm")

print(tt)

\# ===========================

\# Problem 2 — Food Expenditure

\# ===========================

food \<- read.csv("food_expenditure.csv", stringsAsFactors=FALSE)

names(food) \<- tolower(gsub("\[\^a-z0-9\]","\_",names(food)))

n_before \<- nrow(food)

food \<- subset(food, currency %in% c("USD","usd","Us Dollars","US Dollars"))

n_after \<- nrow(food)

print(c(before=n_before, after=n_after))

\# Age: keep 18–100

food \<- subset(food, age \>=18 & age \<=100)

\# State: 2 letters

food \<- subset(food, nchar(state)==2)

\# Food expenditures: non-negative

food \<- subset(food, food_home\>=0 & food_away\>=0 & total_food\>=0 & other_food\>=0)

\# Dining out: between 0 and 21

food \<- subset(food, dining_out\>=0 & dining_out\<=21)

n_final \<- nrow(food)

print(n_final)

\# =======================

\# Problem 3 — Collatz

\# =======================

nextCollatz \<- function(n){

if(!is.numeric(n) \|\| n\<=0 \|\| n!=as.integer(n)) stop("Positive integer required")

if(n %% 2 == 0) n/2 else 3\*n+1

}

collatzSequence \<- function(n){

if(!is.numeric(n) \|\| n\<=0 \|\| n!=as.integer(n)) stop("Positive integer required")

seq \<- n

while(n!=1){

n \<- nextCollatz(n)

seq \<- c(seq,n)

}

list(sequence=seq, length=length(seq))

}

\# Demonstrations

print(nextCollatz(5))

print(nextCollatz(16))

print(collatzSequence(5)\$sequence)

print(collatzSequence(19)\$sequence)

\# Shortest and longest sequences 100–500

lens \<- sapply(100:500, function(x) collatzSequence(x)\$length)

min_len \<- min(lens); max_len \<- max(lens)

shortest_start \<- min(which(lens==min_len))+99

longest_start \<- min(which(lens==max_len))+99

print(data.frame(shortest_start=shortest_start, min_len=min_len,

longest_start=longest_start, max_len=max_len)))
